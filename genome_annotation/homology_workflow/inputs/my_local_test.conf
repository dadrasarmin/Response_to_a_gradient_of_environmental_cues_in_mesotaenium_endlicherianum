include required(classpath("application"))
  database {
    profile = "slick.jdbc.HsqldbProfile$"
    db {
      driver = "org.hsqldb.jdbcDriver"
      url = """
      jdbc:hsqldb:file:cromwell-executions/cromwell-db/cromwell-db;
      shutdown=false;
      hsqldb.default_table_type=cached;hsqldb.tx=mvcc;
      hsqldb.result_max_memory_rows=10000;
      hsqldb.large_data=true;
      hsqldb.applog=1;
      hsqldb.lob_compressed=true;
      hsqldb.script_format=3
      """
      connectionTimeout = 120000
      numThreads = 1
    }
  }

  workflow-options {
    # save all workflow logs to refer back to
    workflow-log-temporary = false
  }

#    concurrent-job-limit = 2
#    max-concurrent-workflows = 1

  call-caching {
    # Allows re-use of existing results for jobs you've already run
    # (default: false)
   enabled = true

    # Whether to invalidate a cache result forever if we cannot reuse them. Disable this if you expect some cache copies
    # to fail for external reasons which should not invalidate the cache (e.g. auth differences between users):
    # (default: true)
   invalidate-bad-cache-results = true
  }

  backend {
    default = local
    providers {
      local {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
        config {
          concurrent-job-limit = 50
          run-in-background = true
          runtime-attributes = """
          """

          submit = "/usr/bin/env bash ${script}"

          filesystems {
            local {
              localization: [
                ## Available options for this and caching: , "soft-link" , "hard-link", "copy"
                "soft-link", "copy"
              ]
              ## call caching config relating to the filesystem side
              caching {
                # When copying a cached result, what type of file duplication should occur. Attempted in the order listed below:
                duplication-strategy: [
                  "soft-link", "copy"
                ]
                # Possible values: file, path, path+modtime
                # "file" will compute an md5 hash of the file content.
                # "path" will compute an md5 hash of the file path. This strategy will only be effective if the duplication-strategy (above) is set to "soft-link",
                # in order to allow for the original file path to be hashed.
                # "path+modtime" will compute an md5 hash of the file path and the last modified time. The same conditions as for "path" apply here.
                # Default: file
                hashing-strategy: "path"

                # When true, will check if a sibling file with the same name and the .md5 extension exists, and if it does, use the content of this file as a hash.
                # If false or the md5 does not exist, will proceed with the above-defined hashing strategy.
                # Default: false
                check-sibling-md5: false
              }
            }
          }

          default-runtime-attributes {
            failOnStderr: false
            continueOnReturnCode: [0, 1]
            ContinueWhilePossible: true
          }
        }
      }
    }
  }
